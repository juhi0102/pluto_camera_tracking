def track_blue(self, frame):
        
        # Convert frame to HSV color space
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        
        # Define range of blue color in HSV
        lower_blue = np.array([100, 100, 100])
        upper_blue = np.array([140, 255, 255])
        
        # Threshold the HSV image to get only blue colors
        mask = cv2.inRange(hsv, lower_blue, upper_blue)
        
        # Find contours in the mask
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # If contours are found
        if contours:
            # Find the largest contourq
            max_contour = max(contours, key=cv2.contourArea)
            
            # Get the centroid of the largest contour
            M = cv2.moments(max_contour)
            if M["m00"] != 0:
                cx = int(M["m10"] / M["m00"])
                cy = int(M["m01"] / M["m00"])
                
                # Display centroid position
                cv2.circle(frame, (cx, cy), 5, (0, 0, 255), -1)
                
                # Calculate the offset from the center
                offset_x = cx - frame.shape[1] // 2
                offset_y = cy - frame.shape[0] // 2
                
                Kp = 0.2  
                Kd = 0.1  
                # Update previous offset values for next iteration
                prev_offset_x = offset_x
                prev_offset_y = offset_y


                # Assuming previous offset values are stored as prev_offset_x and prev_offset_y
                # Calculate derivative of offset values
                delta_offset_x = offset_x - prev_offset_x
                delta_offset_y = offset_y - prev_offset_y

                
                # Control the drone based on centroid position
                if abs(offset_x) > 100:  # Adjust drone's roll
                    self.drone.rcRoll = 1500 + int(offset_x * Kp + delta_offset_x * Kd)
                    print("Adjusting roll:", self.drone.rcRoll)
                else:  # Centered in X direction
                    self.drone.rcRoll = 1500

                if abs(offset_y) > 100:  # Adjust drone's pitch
                    self.drone.rcPitch = 1500 + int(offset_y * Kp + delta_offset_y * Kd)
                    print("Adjusting pitch:", self.drone.rcPitch)
                else:  # Centered in Y direction
                    self.drone.rcPitch = 1500

                

                cv2.putText(frame, f"Centroid: ({cx}, {cy})", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        # If no contours are found, stop the drone's movements
        else:
            self.drone.rcRoll = 1500
            self.drone.rcPitch = 1500
